CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMakeModules/" ${CMAKE_MODULE_PATH})

PROJECT(EQEmu)

IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "Choose the type of build." FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

IF(MSVC OR MINGW)
    ADD_DEFINITIONS(-D_WINDOWS)
    IF(CMAKE_CL_64)
        ADD_DEFINITIONS(-DWIN64)
    ELSE(CMAKE_CL_64)
        ADD_DEFINITIONS(-DWIN32)
    ENDIF(CMAKE_CL_64)
ENDIF(MSVC OR MINGW)

IF(MSVC)
    IF(CMAKE_CL_64)
        SET(ZLIB_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/zlib_x64")
        SET(MYSQL_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/mysql_x64")
    ELSE(CMAKE_CL_64)
        SET(ZLIB_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/zlib_x86")
        SET(MYSQL_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/mysql_x86")
    ENDIF(CMAKE_CL_64)
    
    OPTION(EQEMU_DISABLE_CRT_SECURE_WARNINGS "Disable Secure CRT Warnings" ON)
    IF(EQEMU_DISABLE_CRT_SECURE_WARNINGS)
        ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
    ENDIF(EQEMU_DISABLE_CRT_SECURE_WARNINGS)
    
    OPTION(EQEMU_FAST_FLOATINGPOINT "Use MSVC /fp:fast option" ON)
    IF(EQEMU_FAST_FLOATINGPOINT)
		ADD_DEFINITIONS(/fp:fast)
	ENDIF(EQEMU_FAST_FLOATINGPOINT)
    
    FOREACH(flag_var CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_RELWITHDEBINFO CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELEASE CMAKE_C_FLAGS_RELWITHDEBINFO)
        IF(${flag_var} MATCHES "/MD")
            STRING(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
        ENDIF(${flag_var} MATCHES "/MD")
    ENDFOREACH(flag_var)
ELSE(MSVC)
    ADD_DEFINITIONS(-DHAS_UNION_SEMUN)
ENDIF(MSVC)

IF(NOT STDINT_CHECK_RESULT)
    MESSAGE(STATUS "Checking <stdint.h>")
    TRY_COMPILE(STDINT_CHECK_RESULT "${CMAKE_SOURCE_DIR}/CMakeModules/CheckStdintBin" "${CMAKE_SOURCE_DIR}/CMakeModules/CheckStdint.cpp")
    IF(STDINT_CHECK_RESULT) 
        MESSAGE(STATUS "<stdint.h> found.")
        ADD_DEFINITIONS(-DEQEMU_USE_STDINT)
    ENDIF(STDINT_CHECK_RESULT)
ENDIF()

SET(EQEMU_DEBUG_LEVEL 5 CACHE STRING "EQEmu debug level:
  0 - Quiet mode Errors to file Status and Normal ignored
  1 - Status and Normal to console, Errors to logfile
  2 - Status, Normal, and Error to console and logfile
  3 - Light debug release errors and status
  4 - Moderate debug release errors and status
  5 - Maximum debug release errors and status
  10 - More errors than you ever wanted to see"
)

OPTION(EQEMU_ENABLE_BOTS "Enable Bots" OFF)
IF(EQEMU_ENABLE_BOTS)
    ADD_DEFINITIONS(-DBOTS)
ENDIF(EQEMU_ENABLE_BOTS)

OPTION(EQEMU_BUILD_SERVER "Build the game server." ON)
OPTION(EQEMU_BUILD_LOGIN "Build the login server." OFF)
OPTION(EQEMU_BUILD_AZONE "Build azone utility." OFF)

IF(UNIX)
    OPTION(EQEMU_BUILD_CLEANIPC "Build cleanipc." ON)
    OPTION(EQEMU_CPP_ELEVEN "Enable C++11 extentions in g++" OFF)
    IF(EQEMU_CPP_ELEVEN)
        ADD_DEFINITIONS(-std=c++0x)
    ENDIF(EQEMU_CPP_ELEVEN)
ENDIF(UNIX)

ADD_DEFINITIONS(-DEMBPERL)
ADD_DEFINITIONS(-DEMBPERL_PLUGIN)
ADD_DEFINITIONS(-DEQDEBUG=${EQEMU_DEBUG_LEVEL})
ADD_DEFINITIONS(-DSHAREMEM)
ADD_DEFINITIONS(-DINVERSEXY)
ADD_DEFINITIONS(-DFIELD_ITEMS)

FIND_PACKAGE(ZLIB REQUIRED)
FIND_PACKAGE(MySQL REQUIRED)
FIND_PACKAGE(PerlLibs REQUIRED)
INCLUDE_DIRECTORIES("${ZLIB_INCLUDE_DIRS}" "${PERL_INCLUDE_PATH}" "${MySQL_INCLUDE_DIR}")

IF(EQEMU_BUILD_SERVER OR EQEMU_BUILD_LOGIN)
    ADD_SUBDIRECTORY(common)
ENDIF(EQEMU_BUILD_SERVER OR EQEMU_BUILD_LOGIN)
IF(EQEMU_BUILD_SERVER)
    ADD_SUBDIRECTORY(EMuShareMem)
    ADD_SUBDIRECTORY(world)
    ADD_SUBDIRECTORY(zone)
    ADD_SUBDIRECTORY(ucs)
    ADD_SUBDIRECTORY(queryserv)
    ADD_SUBDIRECTORY(eqlaunch)
ENDIF(EQEMU_BUILD_SERVER)
IF(EQEMU_BUILD_LOGIN)
    ADD_SUBDIRECTORY(EQEmuLoginServer)
ENDIF(EQEMU_BUILD_LOGIN)

IF(EQEMU_BUILD_AZONE OR EQEMU_BUILD_CLEANIPC)
    ADD_SUBDIRECTORY(utils)
ENDIF(EQEMU_BUILD_AZONE OR EQEMU_BUILD_CLEANIPC)
